/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package toursgpro;

import utility.RouteDisplay;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import station.Station;

/**
 *AJP Assignment 1
 * @author Yap Jie Xiang P1430769 DISM/FT/3A32
 */
public class TourSG extends javax.swing.JFrame {

    /**
     * Creates new form TourSG
     */
    public TourSG() {
        initComponents();

        //MY METHODS
        Manager.initServices();
        searchList.setModel(DisplayManager.getListModel());
        tableModel = (DefaultTableModel) displayTable.getModel();

        JOptionPane.showMessageDialog(null, generalFeatures + mrtFeatures + busFeatures);
    }
    // My Message
    private static final String generalFeatures = "---GENERAL FEATURES---\n"
            + "Case Insensitive (try 'jUrOng EaSt')" + '\n'
            + "Sorted by total distance" + '\n'
            + "" + '\n'
            + "---ROUTE FINDING---" + '\n'
            + "Single Transfer is enabled" + '\n'
            + "Distance between stations after transferring are ACCURATE" + '\n'
            + "Distance between stations after transferring are CONTINUOUS" + '\n' + '\n';

    private static final String mrtFeatures = "---MRT FEATURES---\n"
            + "Able to view services by name (try 'ns' or 'ew')" + '\n'
            + "Search by both StationCode(NS1) and StationName(Jurong East)" + '\n'
            + "StationCode(NS1) is automatically changed to StationName(Jurong East) during searching" + '\n';

    private static final String busFeatures = "---BUS FEATURES---\n"
            + "Able to view services by name (try '61' or '176')" + '\n'
            + "Search by StationCode(43009)" + '\n'
            + "Bus direction is clearly stated and does not go against traffic" + '\n';

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayPanel = new javax.swing.JPanel();
        displayScrollPane = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        displayLabel = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        searchListSP = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList<>();
        directionsPanel = new javax.swing.JPanel();
        directionsFromLabel = new javax.swing.JLabel();
        getDirectionsButton = new javax.swing.JButton();
        directionsToLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        setAsToButton = new javax.swing.JButton();
        setAsFromButton = new javax.swing.JButton();
        searchTextAreaSP = new javax.swing.JScrollPane();
        searchTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "Code", "Distance", "Name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayScrollPane.setViewportView(displayTable);

        displayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Route"));

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        searchPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        searchList.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        searchList.setSelectedIndex(0);
        searchList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                searchListValueChanged(evt);
            }
        });
        searchListSP.setViewportView(searchList);

        directionsFromLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("From"));

        getDirectionsButton.setText("Get Directions");
        getDirectionsButton.setAlignmentY(0.3F);
        getDirectionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDirectionsButtonActionPerformed(evt);
            }
        });

        directionsToLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("To"));

        javax.swing.GroupLayout directionsPanelLayout = new javax.swing.GroupLayout(directionsPanel);
        directionsPanel.setLayout(directionsPanelLayout);
        directionsPanelLayout.setHorizontalGroup(
            directionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(directionsPanelLayout.createSequentialGroup()
                        .addComponent(directionsFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(directionsToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(getDirectionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        directionsPanelLayout.setVerticalGroup(
            directionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directionsPanelLayout.createSequentialGroup()
                .addGroup(directionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directionsFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(directionsToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(getDirectionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        searchTextField.setText("Enter text here");
        searchTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        setAsToButton.setText("Set as To");
        setAsToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAsToButtonActionPerformed(evt);
            }
        });

        setAsFromButton.setText("Set as From");
        setAsFromButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAsFromButtonActionPerformed(evt);
            }
        });

        searchTextArea.setEditable(false);
        searchTextArea.setColumns(20);
        searchTextArea.setLineWrap(true);
        searchTextArea.setRows(3);
        searchTextArea.setWrapStyleWord(true);
        searchTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        searchTextArea.setFocusable(false);
        searchTextAreaSP.setViewportView(searchTextArea);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchTextField)
                        .addGap(18, 18, 18)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(setAsToButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(setAsFromButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(searchListSP, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTextAreaSP, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directionsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(directionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextAreaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchListSP, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(setAsFromButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setAsToButton))
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("Menu");

        jMenuItem1.setText("Features");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(displayPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        // If default text, make text field empty
        if (searchTextField.getText().equals("Enter text here")) {
            searchTextField.setText("");
        }
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        // If empty text, set default text
        if (searchTextField.getText().equals("")) {
            searchTextField.setText("Enter text here");
        }
    }//GEN-LAST:event_searchTextFieldFocusLost

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased

        // Get search value
        String search = searchTextField.getText();

        // If has station/service name, set list and description
        if (Manager.has(search)) {
            ArrayList<RouteDisplay> array = Manager.findServices(search);
            DisplayManager.setListElements(array);
            if (array.size() > 0) {
                searchList.setSelectedIndex(0);
            }
        } else {// if there is nothing, set to null
            DisplayManager.setListElements(null);
            searchList.setSelectedIndex(-1);
        }

        // if has station name, set colour
        if (Manager.hasStation(search)) {
            searchTextField.setForeground(DARKGREEN);
        } else {
            searchTextField.setForeground(Color.BLACK);
        }


    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void setAsFromButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAsFromButtonActionPerformed
        // TODO add your handling code here:
        String input = searchTextField.getText();

        if (Manager.hasStation(input)) {
            directionsFromLabel.setText(input);
        } else {
            Manager.showError("'" + input + "' is not a station");
        }
    }//GEN-LAST:event_setAsFromButtonActionPerformed

    private void setAsToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAsToButtonActionPerformed
        // TODO add your handling code here:
        String input = searchTextField.getText();

        if (Manager.hasStation(input)) {
            directionsToLabel.setText(input);
        } else {
            Manager.showError("'" + input + "' is not a station");
        }
    }//GEN-LAST:event_setAsToButtonActionPerformed

    private void getDirectionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDirectionsButtonActionPerformed

        // Get the origin and destination
        String from = directionsFromLabel.getText();
        String to = directionsToLabel.getText();

        // Check they are valid
        if (!from.equals("") && !to.equals("")) {
            ArrayList<RouteDisplay> routeDisplayArray = Manager.getDirections(from, to);

            DisplayManager.setListElements(routeDisplayArray);
        }
    }//GEN-LAST:event_getDirectionsButtonActionPerformed

    private void searchListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_searchListValueChanged

        // Get Selected Value
        String selectedValue = searchList.getSelectedValue();

        // Check for dummies
        if (searchList.getSelectedIndex() == -1) {// Nothing selected
            showSelected(null);
            DisplayManager.setPreviousSelection("");
            return;
        } else if (DisplayManager.getPreviousSelection().equals(selectedValue)) {// Repetition
            return;
        } else {
            DisplayManager.setPreviousSelection(selectedValue);
        }

        // Find and set the selected routeDisplay
        for (RouteDisplay element : DisplayManager.getListElements()) {
            if (element.getName().equals(selectedValue)) {
                showSelected(element);
            }
        }

    }//GEN-LAST:event_searchListValueChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, generalFeatures + mrtFeatures + busFeatures);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TourSG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TourSG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TourSG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TourSG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new TourSG().setVisible(true));

//                new Runnable() {
//            public void run() {
//                new TourSG().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel directionsFromLabel;
    private javax.swing.JPanel directionsPanel;
    private javax.swing.JLabel directionsToLabel;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JScrollPane displayScrollPane;
    private javax.swing.JTable displayTable;
    private javax.swing.JButton getDirectionsButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JList<String> searchList;
    private javax.swing.JScrollPane searchListSP;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextArea searchTextArea;
    private javax.swing.JScrollPane searchTextAreaSP;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton setAsFromButton;
    private javax.swing.JButton setAsToButton;
    // End of variables declaration//GEN-END:variables

    private final Color DARKGREEN = new Color(0, 150, 0);
    private final DefaultTableModel tableModel;

    /**
     * Populates all GUI components with the selected routeDisplay
     *
     * @param routeDisplay
     */
    private void showSelected(RouteDisplay routeDisplay) {

        // If nothing selected, clear all GUI components
        if (routeDisplay == null) {
            searchTextArea.setText("");
            displayLabel.setText("");
            setTableModel(null);
        } else {// else populate all GUI components
            searchTextArea.setText(routeDisplay.getDescription());
            displayLabel.setText(routeDisplay.getName());
            setTableModel(routeDisplay);
        }

    }

    /**
     * Populates the table with data from routeDisplay. If routeDisplay is null,
     * empties table
     *
     * @param routeDisplay
     */
    private void setTableModel(RouteDisplay routeDisplay) {

        // Remove all elements
        tableModel.getDataVector().removeAllElements();

        // If null, display nothing
        if (routeDisplay == null) {
            tableModel.fireTableDataChanged();
            return;
        }

        // Repopulate table with data from routeDisplay
        List<Station> route = routeDisplay.getRoute();
        List<String> distance = routeDisplay.getDistanceArray();
        Station station;
        if (distance == null) {// Mrt does not record distance
            for (int i = 0; i < route.size(); i++) {
                station = route.get(i);
                tableModel.addRow(new Object[]{
                    i + 1,
                    station.getCode(),
                    i,
                    station.getName(),
                    station.getDescription()
                });
            }
        } else if (route.size() == distance.size()) {
            for (int i = 0; i < route.size(); i++) {
                station = route.get(i);
                tableModel.addRow(new Object[]{
                    i + 1,
                    station.getCode(),
                    distance.get(i),
                    station.getName(),
                    station.getDescription()
                });
            }
        } else {
            Manager.showError("Error in setTableModel\nrouteArray and distanceArray  differ in length");
        }
        // Update the table
        tableModel.fireTableDataChanged();
    }

    static class DisplayManager {

        private static final DefaultListModel listModel = new DefaultListModel();
        private static ArrayList<RouteDisplay> listElements = new ArrayList<>();
        private static String previousSelection = "";

        public static DefaultListModel getListModel() {
            return listModel;
        }

        public static String getPreviousSelection() {
            return previousSelection;
        }

        public static void setPreviousSelection(String previousSelection) {
            DisplayManager.previousSelection = previousSelection;
        }

        public static void setListElements(ArrayList<RouteDisplay> routeDisplayArray) {

            // Remove all elements
            listModel.removeAllElements();

            // Keep a reference of routeDisplayArray
            listElements = routeDisplayArray;

            // End if nothing to populate
            if (listElements == null || listElements.isEmpty()) {
                return;
            }

            // Sort and populate JList
            Collections.sort(listElements);
            for (RouteDisplay routeDisplay : listElements) {
                listModel.addElement(routeDisplay.getName());
            }

        }

        public static ArrayList<RouteDisplay> getListElements() {
            return listElements;
        }

    }
}
